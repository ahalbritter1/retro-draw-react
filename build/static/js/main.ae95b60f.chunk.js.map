{"version":3,"sources":["components/Header.js","components/Cell.js","utils/index.js","components/Palette.js","components/Grid.js","components/ActionPanel.js","components/App.js","index.js"],"names":["Header","className","Cell","props","color","isActive","handleClick","style","backgroundColor","onClick","COLORS","buildCellList","cellList","i","push","Palette","activeColor","setActiveColor","map","idx","key","Grid","setCellList","console","log","cell","copy","ActionPanel","newCellList","App","useState","_setCellList","localStorage","setItem","JSON","stringify","setCellListOnLocal","useEffect","parse","getItem","getCellListFromLocal","ReactDOM","render","document","getElementById"],"mappings":"6KAYeA,EANA,WACb,OAAO,4BAAQC,UAAU,UACvB,4CCiBWC,EAdF,SAACC,GACZ,IAAMC,EAAQD,EAAMC,MACdC,EAAWF,EAAME,SACjBC,EAAcH,EAAMG,YAExB,OACA,yBAAKL,UAAWI,EAAW,cAAgB,OAC3CE,MAAO,CACTC,gBAAiBJ,GACjBK,QAASH,KChBEI,EAAS,CACpB,MACA,SACA,SACA,QACA,OACA,SACA,QACA,SAOK,SAASC,IAGd,IAFA,IAAMC,EAAW,GAERC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAASE,KAAK,CACZV,MAAO,OAIX,OAAOQ,ECjBT,IAgCeG,EAhCC,SAACZ,GACf,IAAMa,EAAcb,EAAMa,YACpBC,EAAiBd,EAAMc,eAc7B,OACE,yBAAKhB,UAAU,WACZS,EAAOQ,KAAI,SAACd,EAAOe,GAClB,OAAO,kBAAC,EAAD,CAAMC,IAAiBD,EAC9Bf,MAAOA,EACPC,SAAUD,IAAUY,EACpBV,YAAa,WACb,OAAOW,EAAeb,W,OCYfiB,EArCF,SAAClB,GACZ,IAAMa,EAAcb,EAAMa,YACpBJ,EAAWT,EAAMS,SACjBU,EAAcnB,EAAMmB,YAkB1B,OADAC,QAAQC,IAAIZ,GACL,yBAAKX,UAAU,QACjBW,EAASM,KAAI,SAAEO,EAAMN,GACpB,OAAO,kBAAC,EAAD,CAAMC,IAAcD,EAC3Bf,MAAOqB,EAAKrB,MACZE,YAAa,WAEb,IAAIoB,EAAI,YAAOd,GACfc,EAAKP,GAAKf,MAAQY,EAClBM,EAAYI,WCSLC,EAtCK,SAACxB,GACnB,IAAMa,EAAcb,EAAMa,YACpBJ,EAAWT,EAAMS,SACjBU,EAAcnB,EAAMmB,YAK1B,OAAO,yBAAKrB,UAAU,gBAAf,IAEL,4BAAQQ,QAAS,WACf,IAAMmB,EAAcjB,IACpBW,EAAYM,KAFd,aAQA,4BAAQnB,QAAS,WACf,IAAMmB,EAAcjB,IACpBiB,EAAYV,KAAI,SAACO,GAAD,OAAUA,EAAKrB,MAAQY,KACvCM,EAAYM,KAHd,YAQA,4BAAQnB,QACN,WACE,IAAMmB,EAAchB,EAASM,KAAI,SAACO,EAAMN,GAEtC,OADAM,EAAKrB,MAAQmB,QAAQC,IAAIC,EAAKrB,OAASqB,EAAKrB,MAAQY,EAC7CS,KAETH,EAAYM,KANhB,gBCqCWC,EAjCH,WAAM,MAQsBC,mBAASpB,EAAO,IARtC,mBAQTM,EARS,KAQIC,EARJ,OASiBa,mBAASnB,IAAiB,IAT3C,mBASTC,EATS,KASCmB,EATD,KAYhB,SAAST,EAAYM,IArBI,SAAChB,GAC1BoB,aAAaC,QAAQ,WAAYC,KAAKC,UAAUvB,IAqB9CwB,CAAmBR,GACnBG,EAAaH,GAOf,OAJAS,qBAAU,WACRN,EArCyB,WAC3B,IAAInB,EAAWsB,KAAKI,MAAMN,aAAaO,QAAQ,aAE/C,OAAI3B,GAIGD,IA8BQ6B,MACZ,IAEI,yBAAKvC,UAAU,OAEpB,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAASe,YAAaA,EAAaC,eAAgBA,IAEnD,kBAAC,EAAD,CAAMD,YAAaA,EAAaJ,SAAUA,EAAUU,YAAaA,IAEjE,kBAAC,EAAD,CAAaN,YAAaA,EAAaJ,SAAUA,EAAUU,YAAaA,MC/D5EmB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,S","file":"static/js/main.ae95b60f.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * The Header is simply the main heading of the application,\n * no props... just a static file.\n */\nconst Header = () => {\n  return <header className=\"header\">\n    <h1>Retro Draw</h1>\n  </header>\n}\n\nexport default Header;","import React from 'react';\n\n/**\n * The Cell component represents the fundamental \"clickable object\" in\n * retro-draw, there will be <Cell /> in both Palette and Grid.\n * \n * Props passed in will include:\n * - color, which is the background color of the cell\n * - isActive, which will be set only on cells in the Palette\n * - handleClick, which will be a function to run when the cell has been clicked on \n */\nconst Cell = (props) => {\n  const color = props.color;\n  const isActive = props.isActive;\n  const handleClick = props.handleClick;\n  /* Create constants for color, isActive, and handleClick, reading the value off of props */\n    return (\n    <div className={isActive ? \"cell active\" : \"cell\"} \n    style={{\n  backgroundColor: color }}\n  onClick={handleClick} \n  />\n    )\n  }\n\nexport default Cell;","/**\n * COLORS should be an array of color strings,\n * approximately 8 of them.\n */\nexport const COLORS = [\n  'red',\n  'orange',\n  'yellow',\n  'green',\n  'blue',\n  'purple',\n  'white',\n  'black'\n];\n\n/**\n * buildCellList creates and returns an \n * array of empty cell objects\n */\nexport function buildCellList() {\n  const cellList = [];\n\n  for (let i = 0; i < 64; i++) {\n    cellList.push({\n      color: null\n    });\n  }\n\n  return cellList;\n}","import React from 'react';\nimport Cell from './Cell';\n\n/* Need to map over the COLORS array, so we pull them from ../utils */\nimport { COLORS } from '../utils';\n\n/**\n * The Palette component represents the interface for displaying\n * clickable color cells, and needs to communicate the activeColor\n * to other components. \n */\nconst Palette = (props) => {\n  const activeColor = props.activeColor;\n  const setActiveColor = props.setActiveColor;\n  /**\n   * Create constants for activeColor and setActiveColor, reading the value off of the props\n   */ \n  /**\n   * For the template, you need to:\n   * - map over COLORS\n   * - return from the mapping function a <Cell /> which:\n   *    - has a unique key (you can use 'palette-' and the index of the color)\n   *    - has a prop of color equal to the color from the map\n   *    - has a prop of isActive equal to true if activeColor equals the color from the map\n   *    - has a prop of handleClick which is a function that calls setActiveColor, passing it \n   *      the color from the map\n   */\n  return ( \n    <div className=\"palette\">\n      {COLORS.map((color, idx) => {\n        return <Cell key={'palette-', idx} \n        color={color}\n        isActive={color === activeColor ? true : false} \n        handleClick={() => {\n        return setActiveColor(color);\n        }\n        }\n        />\n      })}\n    </div>\n    )\n  }\n\nexport default Palette;","import React from 'react';\nimport Cell from './Cell';\n\n\n/**\n * The Grid component represents the interface for displaying clickable\n * color cells, and needs to update the color of a clicked cell from the\n * activeColor when a user clicks on it.\n */\nconst Grid = (props) => {\n  const activeColor = props.activeColor\n  const cellList = props.cellList;\n  const setCellList = props.setCellList;\n  /**\n   * Create constants for activeColor, cellList, and setCellList, reading the value off of the props\n   */\n\n  \n  /**\n   * For the template you need to:\n   * - map over the cellList\n   * - return from the mapping function a <Cell /> which:\n   *    - has a unique key (you can use 'grid-' and the index of the cell)\n   *    - has a prop of color equal to value of color on the cell from the map\n   *    - has a prop of handleClick which is a function that:\n   *        - makes a copy of the current cellList\n   *        - updates the color of the clicked cell to the activeColor (the index from the map function is useful here)\n   *        - calls setCellList, passing in the updated copy\n   */\n  console.log(cellList);\n  return <div className=\"grid\">\n      {cellList.map(( cell, idx) => {\n        return <Cell key={'grid-', idx} \n        color={cell.color} \n        handleClick={() => {\n  \n        let copy = [...cellList];\n        copy[idx].color = activeColor;\n        setCellList(copy);\n        }\n        }\n        />\n      })}\n    </div>\n}\n\nexport default Grid;","import React from 'react';\n\n/* Need to build a blank cell list when user clicks CLEAR ALL */\nimport { buildCellList } from '../utils';\n\n/**\n * The ActionPanel component represents the interface for updating the Grid\n * based on any number of buttons the user might click on.\n */\nconst ActionPanel = (props) => {\n  const activeColor = props.activeColor;\n  const cellList = props.cellList;\n  const setCellList = props.setCellList;\n  /**\n   * Create constants for activeColor, cellList, and setCellList, reading them from the props\n   */\n\n  return <div className=\"action-panel\"> {\n\n    <button onClick={() => {\n      const newCellList = buildCellList();\n      setCellList(newCellList);\n    }\n    }>clear all</button>\n  }\n\n\n    <button onClick={() => {\n      const newCellList = buildCellList();\n      newCellList.map((cell) => cell.color = activeColor);\n      setCellList(newCellList)\n    }}>fill all</button>\n\n\n\n    <button onClick={\n      () => {\n        const newCellList = cellList.map((cell, idx) => {\n          cell.color ? console.log(cell.color) : cell.color = activeColor;\n          return cell;\n        })\n        setCellList(newCellList);\n      }\n    }>fill empty</button>\n  </div >\n}\n\nexport default ActionPanel;","import React, { useState, useEffect } from 'react';\n\n\n/**\n * The main application uses these four components\n */\nimport Header from './Header';\nimport Palette from './Palette';\nimport Grid from './Grid';\nimport ActionPanel from './ActionPanel';\n\n/**\n * We need access to COLORS and buildCellList for our initial\n * state objects\n */\nimport {\n  COLORS,\n  buildCellList\n} from '../utils';\n\nconst getCellListFromLocal = () => {\n  let cellList = JSON.parse(localStorage.getItem('cellList'));\n\n  if (cellList) {\n    return cellList;\n  }\n\n  return buildCellList();\n}\n\nconst setCellListOnLocal = (cellList) => {\n  localStorage.setItem('cellList', JSON.stringify(cellList));\n}\n\n/**\n * The App component represents our entire application. It contains all of the\n * top level components, and is responsible for helping its children communicate \n * with each other via state objects, and state functions.\n */\nconst App = () => {\n  /**\n   * Using useState you need to create:\n   * \n   * - activeColor, setActiveColor initialized to COLORS[0]\n   * - cellList, setCellList initialized to buildCellList()\n   */\n\n  const [activeColor, setActiveColor] = useState(COLORS[0]);\n  const [cellList, _setCellList] = useState(buildCellList(), []);\n\n\n  function setCellList(newCellList) {\n    setCellListOnLocal(newCellList);\n    _setCellList(newCellList);\n  }\n\n  useEffect(() => {\n    _setCellList(getCellListFromLocal())\n  }, []);\n\n  return <div className=\"app\">\n    {/* Header needs no props */}\n    <Header />\n    {/* Palette needs to be passed activeColor and setActiveColor */}\n    <Palette activeColor={activeColor} setActiveColor={setActiveColor} />\n    {/* Grid needs to be passed activeColor, cellList, and setCellList */}\n    <Grid activeColor={activeColor} cellList={cellList} setCellList={setCellList} />\n    {/* ActionPanel needs to be passed activeColor, cellList, and setCellList */}\n    <ActionPanel activeColor={activeColor} cellList={cellList} setCellList={setCellList} />\n  </div>\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n)"],"sourceRoot":""}